// –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ ANSI-–∫–æ–¥–∞–º–∏
const colorNames = {
    "#808080": { name: "–°–µ—Ä—ã–π", fg: 30, bg: 40 },
    "#ff0000": { name: "–ö—Ä–∞—Å–Ω—ã–π", fg: 31, bg: 41 },
    "#00ff00": { name: "–ó–µ–ª–µ–Ω—ã–π", fg: 32, bg: 42 },
    "#ffff00": { name: "–ñ–µ–ª—Ç—ã–π", fg: 33, bg: 43 },
    "#0000ff": { name: "–°–∏–Ω–∏–π", fg: 34, bg: 44 },
    "#ff00ff": { name: "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", fg: 35, bg: 45 },
    "#00ffff": { name: "–ë–∏—Ä—é–∑–æ–≤—ã–π", fg: 36, bg: 46 },
    "#ffffff": { name: "–ë–µ–ª—ã–π", fg: 37, bg: 47 },
    "#000000": { name: "–ß–µ—Ä–Ω—ã–π", fg: 30, bg: 40 },
    "#ff4500": { name: "–û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π", fg: 31, bg: 41 },
    "#1c2526": { name: "–¢–µ–º–Ω—ã–π —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π", fg: 30, bg: 40 },
    "#4b0082": { name: "–ò–Ω–¥–∏–≥–æ", fg: 35, bg: 45 },
    "#d3d3d3": { name: "–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π", fg: 37, bg: 47 },
    "#f0f8ff": { name: "–ê–ª–∏—Å–∞ –≥–æ–ª—É–±–∞—è", fg: 37, bg: 47 },
    "#40444b": { name: "–¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π", fg: 30, bg: 40 }
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const textEditor = document.getElementById("textEditor");
const randomFgColorBtn = document.getElementById("randomFgColorBtn");
const fgColorPicker = document.getElementById("fgColorPicker");
const fgColorName = document.getElementById("fgColorName");
const fgCustomColor = document.getElementById("fgCustomColor");
const applyFgColorBtn = document.getElementById("applyFgColorBtn");
const randomBgColorBtn = document.getElementById("randomBgColorBtn");
const bgColorPicker = document.getElementById("bgColorPicker");
const bgColorName = document.getElementById("bgColorName");
const bgCustomColor = document.getElementById("bgCustomColor");
const applyBgColorBtn = document.getElementById("applyBgColorBtn");
const copyBtn = document.getElementById("copyBtn");
const resetBtn = document.getElementById("resetBtn");
const discordCode = document.getElementById("discordCode");
const fgColorButtons = document.querySelectorAll(".fg-color");
const bgColorButtons = document.querySelectorAll(".bg-color");
const themeToggleBtn = document.getElementById("themeToggleBtn");
const fgColorHelp = document.getElementById("fgColorHelp");
const bgColorHelp = document.getElementById("bgColorHelp");
const boldBtn = document.getElementById("boldBtn");
const underlineBtn = document.getElementById("underlineBtn");

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞
let currentFgColor = "#ffffff"; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–µ–ª—ã–π
let currentBgColor = "#40444b"; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
fgColorPicker.value = "#ffffff"; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π
updateFgColorName();
bgColorPicker.value = "#40444b";
updateBgColorName();
updateDiscordCode();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (localStorage.getItem("theme") === "light") {
    document.body.classList.remove("dark-theme");
    document.body.classList.add("light-theme");
    themeToggleBtn.innerText = "‚òÄÔ∏è";
} else {
    document.body.classList.add("dark-theme");
    themeToggleBtn.innerText = "üåô";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
themeToggleBtn.addEventListener("click", () => {
    if (document.body.classList.contains("dark-theme")) {
        document.body.classList.remove("dark-theme");
        document.body.classList.add("light-theme");
        themeToggleBtn.innerText = "‚òÄÔ∏è";
        localStorage.setItem("theme", "light");
    } else {
        document.body.classList.remove("light-theme");
        document.body.classList.add("dark-theme");
        themeToggleBtn.innerText = "üåô";
        localStorage.setItem("theme", "dark");
    }
});

// –≠—Ñ—Ñ–µ–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–æ–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
window.addEventListener("scroll", () => {
    const scrollPosition = window.scrollY;
    document.body.style.backgroundPosition = `center ${scrollPosition * 0.5}px`;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ <br>
document.addEventListener('keydown', event => {
    if (event.key === 'Enter') {
        document.execCommand('insertLineBreak');
        event.preventDefault();
    }
});

// –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
randomFgColorBtn.addEventListener("click", () => {
    const colors = Object.keys(colorNames);
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    fgColorPicker.value = randomColor;
    updateFgColorName();
    currentFgColor = randomColor;
    applyStyle({ color: randomColor });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä—É—á–Ω—É—é
fgColorPicker.addEventListener("input", () => {
    updateFgColorName();
    currentFgColor = fgColorPicker.value;
    applyStyle({ color: currentFgColor });
});

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
fgCustomColor.addEventListener("input", () => {
    const color = fgCustomColor.value;
    if (/^#[0-9A-F]{6}$/i.test(color)) {
        fgColorPicker.value = color;
        updateFgColorName();
        currentFgColor = color;
        applyStyle({ color: currentFgColor });
    }
});

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
applyFgColorBtn.addEventListener("click", () => {
    currentFgColor = fgColorPicker.value;
    applyStyle({ color: fgColorPicker.value });
});

// –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
randomBgColorBtn.addEventListener("click", () => {
    const colors = Object.keys(colorNames);
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    bgColorPicker.value = randomColor;
    updateBgColorName();
    currentBgColor = randomColor;
    applyStyle({ backgroundColor: randomColor });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä—É—á–Ω—É—é
bgColorPicker.addEventListener("input", () => {
    updateBgColorName();
    currentBgColor = bgColorPicker.value;
    applyStyle({ backgroundColor: currentBgColor });
});

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
bgCustomColor.addEventListener("input", () => {
    const color = bgCustomColor.value;
    if (/^#[0-9A-F]{6}$/i.test(color)) {
        bgColorPicker.value = color;
        updateBgColorName();
        currentBgColor = color;
        applyStyle({ backgroundColor: currentBgColor });
    }
});

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ (FG) —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
fgColorButtons.forEach(button => {
    button.addEventListener("click", () => {
        const color = button.getAttribute("data-color");
        fgColorPicker.value = color;
        updateFgColorName();
        currentFgColor = color;
        applyStyle({ color });
    });
});

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ (BG) —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
bgColorButtons.forEach(button => {
    button.addEventListener("click", () => {
        const color = button.getAttribute("data-color");
        bgColorPicker.value = color;
        updateBgColorName();
        currentBgColor = color;
        applyStyle({ backgroundColor: color });
    });
});

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
boldBtn.addEventListener("click", () => {
    document.execCommand("bold", false, null);
    updateDiscordCode();
});

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
underlineBtn.addEventListener("click", () => {
    document.execCommand("underline", false, null);
    updateDiscordCode();
});

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Discord
copyBtn.addEventListener("click", () => {
    discordCode.select();
    try {
        document.execCommand("copy");
        alert("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ Discord.");
    } catch (err) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏–∑ –ø–æ–ª—è –Ω–∏–∂–µ.");
    }
});

// –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∏ —Ü–≤–µ—Ç–æ–≤
resetBtn.addEventListener("click", () => {
    textEditor.innerHTML = "";
    currentFgColor = "#ffffff"; // –ë–µ–ª—ã–π –≤–º–µ—Å—Ç–æ –∫—Ä–∞—Å–Ω–æ–≥–æ
    fgColorPicker.value = "#ffffff";
    updateFgColorName();
    currentBgColor = "#40444b";
    bgColorPicker.value = "#40444b";
    updateBgColorName();
    updateDiscordCode();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è Discord –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
textEditor.addEventListener("input", (event) => {
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        if (range.collapsed) {
            const parentNode = range.startContainer.parentNode;
            if (parentNode === textEditor || (parentNode.tagName === "SPAN" && range.startContainer.nodeType === Node.TEXT_NODE)) {
                if (currentFgColor || currentBgColor) {
                    const span = document.createElement("span");
                    if (currentFgColor) span.style.color = currentFgColor;
                    if (currentBgColor) span.style.backgroundColor = currentBgColor;
                    span.appendChild(document.createTextNode("\u200B"));
                    range.insertNode(span);
                    const newRange = document.createRange();
                    newRange.setStart(span.firstChild, 1);
                    newRange.collapse(true);
                    selection.removeAllRanges();
                    selection.addRange(newRange);
                }
            }
        }
    }
    updateDiscordCode();
});

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener("keydown", (e) => {
    if (e.ctrlKey && !e.shiftKey && e.key >= "1" && e.key <= "9") {
        e.preventDefault();
        const index = parseInt(e.key) - 1;
        const button = fgColorButtons[index];
        if (button) button.click();
    }
    if (e.ctrlKey && e.shiftKey && e.key >= "1" && e.key <= "7") {
        e.preventDefault();
        const index = parseInt(e.key) - 1;
        const button = bgColorButtons[index];
        if (button) button.click();
    }
    if (e.ctrlKey && e.key === "b") { // Ctrl+B –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ
        e.preventDefault();
        document.execCommand("bold", false, null);
        updateDiscordCode();
    }
    if (e.ctrlKey && e.key === "u") { // Ctrl+U –¥–ª—è –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç–æ–≥–æ
        e.preventDefault();
        document.execCommand("underline", false, null);
        updateDiscordCode();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "?"
fgColorHelp.addEventListener("click", () => {
    window.open("https://colorscheme.ru/color-names.html", "_blank");
});

bgColorHelp.addEventListener("click", () => {
    window.open("https://colorscheme.ru/color-names.html", "_blank");
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
function updateFgColorName() {
    const selectedColor = fgColorPicker.value.toLowerCase();
    fgColorName.textContent = colorNames[selectedColor]?.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π";
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
function updateBgColorName() {
    const selectedColor = bgColorPicker.value.toLowerCase();
    bgColorName.textContent = colorNames[selectedColor]?.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π";
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
function applyStyle(styles) {
    const selection = window.getSelection();
    if (!selection.rangeCount) return;

    const range = selection.getRangeAt(0);
    
    if (range.collapsed) {
        const span = document.createElement("span");
        Object.assign(span.style, styles);
        span.appendChild(document.createTextNode("\u200B"));
        range.insertNode(span);
        const newRange = document.createRange();
        newRange.setStart(span.firstChild, 1);
        newRange.collapse(true);
        selection.removeAllRanges();
        selection.addRange(newRange);
    } else {
        const fragment = range.extractContents();
        const newSpan = document.createElement("span");
        Object.assign(newSpan.style, styles);
        newSpan.appendChild(fragment);
        range.insertNode(newSpan);
        const newRange = document.createRange();
        newRange.selectNodeContents(newSpan);
        selection.removeAllRanges();
        selection.addRange(newRange);
    }
    updateDiscordCode();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è Discord
function updateDiscordCode() {
    if (!textEditor.innerText.trim()) {
        discordCode.value = "```ansi\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã—à–µ\n```";
        return;
    }

    let formattedText = "```ansi\n";
    const esc = "\u001b";
    const defaultState = { fg: 2, bg: 2, bold: false, underline: false };
    const states = [defaultState];

    function nodesToANSI(nodes) {
        let text = "";
        for (const node of nodes) {
            if (node.nodeType === Node.TEXT_NODE) {
                const content = node.textContent.replace(/\u200B/g, "");
                if (content) {
                    const currentState = states[states.length - 1];
                    let ansiCode = "";
                    if (currentState.fg !== 2 || currentState.bg !== 2 || currentState.bold || currentState.underline) {
                        const codes = [];
                        if (currentState.fg !== 2) codes.push(currentState.fg);
                        if (currentState.bg !== 2) codes.push(currentState.bg);
                        if (currentState.bold) codes.push(1);
                        if (currentState.underline) codes.push(4);
                        ansiCode = `${esc}[${codes.join(";")}m`;
                    }
                    text += `${ansiCode}${content}${esc}[0m`;
                }
                continue;
            }
            if (node.nodeName === "BR") {
                text += "\n";
                continue;
            }
            if (node.nodeName === "DIV" && node !== textEditor) {
                for (const child of node.childNodes) {
                    text += nodesToANSI([child]);
                    text += "\n";
                }
                continue;
            }

            const newState = { ...states[states.length - 1] };
            const style = node.style;
            const computedStyle = window.getComputedStyle(node);

            if (style.color) {
                const hex = rgbToHex(style.color).toLowerCase();
                if (colorNames[hex]) {
                    newState.fg = colorNames[hex].fg;
                }
            }

            if (style.backgroundColor && style.backgroundColor !== "transparent") {
                const hex = rgbToHex(style.backgroundColor).toLowerCase();
                if (colorNames[hex]) {
                    newState.bg = colorNames[hex].bg;
                }
            }

            if (node.tagName === "B" || computedStyle.fontWeight === "bold" || computedStyle.fontWeight >= 700) {
                newState.bold = true;
            }

            if (node.tagName === "U" || computedStyle.textDecorationLine.includes("underline")) {
                newState.underline = true;
            }

            states.push(newState);
            let childText = nodesToANSI(node.childNodes);
            if (childText) {
                text += childText;
            }
            states.pop();

            const prevState = states[states.length - 1];
            if (prevState.fg !== 2 || prevState.bg !== 2 || prevState.bold || prevState.underline) {
                const codes = [];
                if (prevState.fg !== 2) codes.push(prevState.fg);
                if (prevState.bg !== 2) codes.push(prevState.bg);
                if (prevState.bold) codes.push(1);
                if (prevState.underline) codes.push(4);
                text += `${esc}[${codes.join(";")}m`;
            }
        }
        return text;
    }

    formattedText += nodesToANSI(textEditor.childNodes);
    formattedText += "\n```";
    discordCode.value = formattedText;
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ RGB –≤ HEX
function rgbToHex(color) {
    if (color.startsWith("#")) return color;
    const tempElem = document.createElement("div");
    tempElem.style.color = color;
    document.body.appendChild(tempElem);
    const style = window.getComputedStyle(tempElem).color;
    document.body.removeChild(tempElem);
    const rgbMatch = style.match(/\d+/g);
    if (!rgbMatch) return "#000000";
    const [r, g, b] = rgbMatch.map(Number);
    return "#" + [r, g, b].map(x => x.toString(16).padStart(2, "0")).join("");
}